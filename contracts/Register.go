// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Oracle is an auto generated low-level Go binding around an user-defined struct.
type Oracle struct {
	Name       common.Address
	Ip         string
	Port       string
	Reputation *big.Int
	IsOnline   bool
}

// RegisterMetaData contains all meta data concerning the Register contract.
var RegisterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reportFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklistedOracle\",\"type\":\"address\"}],\"name\":\"OracleBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"OracleOffline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"OracleOnline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"OracleRegisterTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"port\",\"type\":\"string\"}],\"name\":\"OracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reportedOracle\",\"type\":\"address\"}],\"name\":\"OracleReported\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LogOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Login\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"changeRegisterTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"name\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"port\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOnline\",\"type\":\"bool\"}],\"internalType\":\"structOracle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOracleRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"port\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"reportOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"self\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"name\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"port\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOnline\",\"type\":\"bool\"}],\"internalType\":\"structOracle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateRegistrationFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateReportFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260056002555f600560146101000a81548160ff02191690831515021790555034801561002e575f5ffd5b5060405161313838038061313883398181016040528101906100509190610177565b8360038190555082600481905550815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506101db565b5f5ffd5b5f819050919050565b6100fc816100ea565b8114610106575f5ffd5b50565b5f81519050610117816100f3565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101468261011d565b9050919050565b6101568161013c565b8114610160575f5ffd5b50565b5f815190506101718161014d565b92915050565b5f5f5f5f6080858703121561018f5761018e6100e6565b5b5f61019c87828801610109565b94505060206101ad87828801610109565b93505060406101be87828801610163565b92505060606101cf87828801610163565b91505092959194509250565b612f50806101e85f395ff3fe6080604052600436106100dc575f3560e01c80637571bdd01161007e578063af582c6b11610058578063af582c6b146102ae578063e1704d83146102ea578063f00ac1da1461031a578063fe575a8714610344576100dc565b80637571bdd01461021e5780639a6bea181461025a578063a208a89814610284576100dc565b80633ffbd47f116100ba5780633ffbd47f1461015e57806340884c521461018e57806369366c48146101b85780637104ddb2146101f4576100dc565b80630946e807146100e05780630d1db1f01461010a5780632b96895814610134575b5f5ffd5b3480156100eb575f5ffd5b506100f4610380565b6040516101019190611fc4565b60405180910390f35b348015610115575f5ffd5b5061011e610389565b60405161012b9190611ff7565b60405180910390f35b34801561013f575f5ffd5b50610148610451565b6040516101559190611ff7565b60405180910390f35b6101786004803603810190610173919061215d565b610553565b6040516101859190611ff7565b60405180910390f35b348015610199575f5ffd5b506101a261091a565b6040516101af91906123c5565b60405180910390f35b3480156101c3575f5ffd5b506101de60048036038101906101d9919061240f565b610b0e565b6040516101eb9190611ff7565b60405180910390f35b3480156101ff575f5ffd5b50610208610bfe565b60405161021591906124b4565b60405180910390f35b348015610229575f5ffd5b50610244600480360381019061023f919061240f565b610f8f565b6040516102519190611ff7565b60405180910390f35b348015610265575f5ffd5b5061026e6110b6565b60405161027b9190611fc4565b60405180910390f35b34801561028f575f5ffd5b506102986110bf565b6040516102a59190611ff7565b60405180910390f35b3480156102b9575f5ffd5b506102d460048036038101906102cf919061240f565b6112be565b6040516102e19190611ff7565b60405180910390f35b61030460048036038101906102ff91906124fe565b6113ae565b6040516103119190611ff7565b60405180910390f35b348015610325575f5ffd5b5061032e611986565b60405161033b9190611ff7565b60405180910390f35b34801561034f575f5ffd5b5061036a600480360381019061036591906124fe565b611b85565b6040516103779190611ff7565b60405180910390f35b5f600354905090565b5f5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110801561044b57503373ffffffffffffffffffffffffffffffffffffffff166001828154811061040557610404612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b91505090565b5f600560149054906101000a900460ff16156104a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610499906125d6565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610531576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105289061263e565b60405180910390fd5b6001600560146101000a81548160ff0219169083151502179055506001905090565b5f600354341015610599576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610590906126a6565b60405180910390fd5b60095f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a90612734565b60405180910390fd5b60016040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016001815260200160011515815250908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816106e5919061294f565b5060408201518160020190816106fb919061294f565b50606082015181600301556080820151816004015f6101000a81548160ff0219169083151502179055505050600180805490506107389190612a4b565b60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f606460025460035461078c9190612a7e565b6107969190612aec565b90505f81346107a59190612a4b565b90505f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318a9055c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610811573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108359190612b30565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc8490811502906040515f60405180830381858888f1935050505015801561087a573d5f5f3e3d5ffd5b5081600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff167f8c1c8966369199dc710cd8b615bf16a86520dd165679cb74aa5f427d2bf8c0c98787604051610905929190612b93565b60405180910390a26001935050505092915050565b60606001805480602002602001604051908101604052809291908181526020015f905b82821015610b05578382905f5260205f2090600502016040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546109c29061277f565b80601f01602080910402602001604051908101604052809291908181526020018280546109ee9061277f565b8015610a395780601f10610a1057610100808354040283529160200191610a39565b820191905f5260205f20905b815481529060010190602001808311610a1c57829003601f168201915b50505050508152602001600282018054610a529061277f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e9061277f565b8015610ac95780601f10610aa057610100808354040283529160200191610ac9565b820191905f5260205f20905b815481529060010190602001808311610aac57829003601f168201915b5050505050815260200160038201548152602001600482015f9054906101000a900460ff1615151515815250508152602001906001019061093d565b50505050905090565b5f600560149054906101000a900460ff1615610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b56906125d6565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be59061263e565b60405180910390fd5b8160048190555060019050919050565b610c06611f68565b5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590612c12565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660018281548110610cb957610cb8612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490612c7a565b60405180910390fd5b5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc90612ce2565b60405180910390fd5b60018181548110610dd957610dd8612529565b5b905f5260205f2090600502016040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610e549061277f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e809061277f565b8015610ecb5780601f10610ea257610100808354040283529160200191610ecb565b820191905f5260205f20905b815481529060010190602001808311610eae57829003601f168201915b50505050508152602001600282018054610ee49061277f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f109061277f565b8015610f5b5780601f10610f3257610100808354040283529160200191610f5b565b820191905f5260205f20905b815481529060010190602001808311610f3e57829003601f168201915b5050505050815260200160038201548152602001600482015f9054906101000a900460ff1615151515815250509250505090565b5f600560149054906101000a900460ff1615610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd7906125d6565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461106f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110669061263e565b60405180910390fd5b816002819055507fa288a9ac9f74fe4c85e8263739645d49297e82ffa010aac11899ba671a54d1ac826040516110a59190611fc4565b60405180910390a160019050919050565b5f600454905090565b5f5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f90612c12565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166001828154811061117357611172612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee90612c7a565b60405180910390fd5b5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f6001828154811061124d5761124c612529565b5b905f5260205f2090600502016004015f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f6eccb14325d715b33601268fe5c7d8a1618261e4d242e890c9e2e372adaf1fbc60405160405180910390a260019250505090565b5f600560149054906101000a900460ff161561130f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611306906125d6565b60405180910390fd5b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461139e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113959061263e565b60405180910390fd5b8160038190555060019050919050565b5f5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110611437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142e90612c12565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166001828154811061146257611461612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dd90612c7a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154b90612d4a565b60405180910390fd5b60095f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156115de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d590612db2565b60405180910390fd5b60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156116a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169a90612e1a565b60405180910390fd5b6004543410156116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df90612e82565b60405180910390fd5b600160065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154809291906117c590612ea0565b91905055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc288b29f22724d188803361dc865debd5a98e3f2c073a19c9fe8639a6274d23d60405160405180910390a3600160026001805490506118389190612aec565b6118429190612ee7565b60075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541061197c57600160095f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f8f4f70e0f343350f6df22d754271f375cf94e4a4d04ccb29df713c6ffce14dbf60405160405180910390a2600454600a5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461196b9190612ee7565b9250508190555061197b83611bd7565b5b6001915050919050565b5f5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001805490508110611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690612c12565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660018281548110611a3a57611a39612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab590612c7a565b60405180910390fd5b5f60085f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506001808281548110611b1457611b13612529565b5b905f5260205f2090600502016004015f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f3a21ecfcdc410d1e3552f24e84bbf13af57e47436f3b9ac5045ae9f3adcdc41160405160405180910390a260019250505090565b5f60095f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b5f5f90505f5f90505b600180549050811015611cd45760065f60018381548110611c0457611c03612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611cc7578180611cc390612ea0565b9250505b8080600101915050611be0565b505f81600354611ce49190612aec565b90505f5f90505b600180549050811015611f625760065f60018381548110611d0f57611d0e612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611f555760018181548110611dd757611dd6612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600a5f60018681548110611e3657611e35612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054611ea89190612ee7565b90811502906040515f60405180830381858888f19350505050158015611ed0573d5f5f3e3d5ffd5b505f600a5f60018481548110611ee957611ee8612529565b5b905f5260205f2090600502015f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b8080600101915050611ceb565b50505050565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f81526020015f151581525090565b5f819050919050565b611fbe81611fac565b82525050565b5f602082019050611fd75f830184611fb5565b92915050565b5f8115159050919050565b611ff181611fdd565b82525050565b5f60208201905061200a5f830184611fe8565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61206f82612029565b810181811067ffffffffffffffff8211171561208e5761208d612039565b5b80604052505050565b5f6120a0612010565b90506120ac8282612066565b919050565b5f67ffffffffffffffff8211156120cb576120ca612039565b5b6120d482612029565b9050602081019050919050565b828183375f83830152505050565b5f6121016120fc846120b1565b612097565b90508281526020810184848401111561211d5761211c612025565b5b6121288482856120e1565b509392505050565b5f82601f83011261214457612143612021565b5b81356121548482602086016120ef565b91505092915050565b5f5f6040838503121561217357612172612019565b5b5f83013567ffffffffffffffff8111156121905761218f61201d565b5b61219c85828601612130565b925050602083013567ffffffffffffffff8111156121bd576121bc61201d565b5b6121c985828601612130565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612225826121fc565b9050919050565b6122358161221b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61226d8261223b565b6122778185612245565b9350612287818560208601612255565b61229081612029565b840191505092915050565b6122a481611fac565b82525050565b6122b381611fdd565b82525050565b5f60a083015f8301516122ce5f86018261222c565b50602083015184820360208601526122e68282612263565b915050604083015184820360408601526123008282612263565b9150506060830151612315606086018261229b565b50608083015161232860808601826122aa565b508091505092915050565b5f61233e83836122b9565b905092915050565b5f602082019050919050565b5f61235c826121d3565b61236681856121dd565b935083602082028501612378856121ed565b805f5b858110156123b357848403895281516123948582612333565b945061239f83612346565b925060208a0199505060018101905061237b565b50829750879550505050505092915050565b5f6020820190508181035f8301526123dd8184612352565b905092915050565b6123ee81611fac565b81146123f8575f5ffd5b50565b5f81359050612409816123e5565b92915050565b5f6020828403121561242457612423612019565b5b5f612431848285016123fb565b91505092915050565b5f60a083015f83015161244f5f86018261222c565b50602083015184820360208601526124678282612263565b915050604083015184820360408601526124818282612263565b9150506060830151612496606086018261229b565b5060808301516124a960808601826122aa565b508091505092915050565b5f6020820190508181035f8301526124cc818461243a565b905092915050565b6124dd8161221b565b81146124e7575f5ffd5b50565b5f813590506124f8816124d4565b92915050565b5f6020828403121561251357612512612019565b5b5f612520848285016124ea565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f4f776e657273686970206973207265766f6b65642c206e6f2061646d696e69735f8201527f74726174697665206368616e67657320616c6c6f776564210000000000000000602082015250565b5f6125c0603883612556565b91506125cb82612566565b604082019050919050565b5f6020820190508181035f8301526125ed816125b4565b9050919050565b7f4e6f7420617574686f72697a65640000000000000000000000000000000000005f82015250565b5f612628600e83612556565b9150612633826125f4565b602082019050919050565b5f6020820190508181035f8301526126558161261c565b9050919050565b7f496e73756666696369656e7420726567697374726174696f6e206665650000005f82015250565b5f612690601d83612556565b915061269b8261265c565b602082019050919050565b5f6020820190508181035f8301526126bd81612684565b9050919050565b7f43616e6e6f74207265676973746572206120626c61636b6c6973746564206f725f8201527f61636c6500000000000000000000000000000000000000000000000000000000602082015250565b5f61271e602483612556565b9150612729826126c4565b604082019050919050565b5f6020820190508181035f83015261274b81612712565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061279657607f821691505b6020821081036127a9576127a8612752565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261280b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826127d0565b61281586836127d0565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61285061284b61284684611fac565b61282d565b611fac565b9050919050565b5f819050919050565b61286983612836565b61287d61287582612857565b8484546127dc565b825550505050565b5f5f905090565b612894612885565b61289f818484612860565b505050565b5b818110156128c2576128b75f8261288c565b6001810190506128a5565b5050565b601f821115612907576128d8816127af565b6128e1846127c1565b810160208510156128f0578190505b6129046128fc856127c1565b8301826128a4565b50505b505050565b5f82821c905092915050565b5f6129275f198460080261290c565b1980831691505092915050565b5f61293f8383612918565b9150826002028217905092915050565b6129588261223b565b67ffffffffffffffff81111561297157612970612039565b5b61297b825461277f565b6129868282856128c6565b5f60209050601f8311600181146129b7575f84156129a5578287015190505b6129af8582612934565b865550612a16565b601f1984166129c5866127af565b5f5b828110156129ec578489015182556001820191506020850194506020810190506129c7565b86831015612a095784890151612a05601f891682612918565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612a5582611fac565b9150612a6083611fac565b9250828203905081811115612a7857612a77612a1e565b5b92915050565b5f612a8882611fac565b9150612a9383611fac565b9250828202612aa181611fac565b91508282048414831517612ab857612ab7612a1e565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612af682611fac565b9150612b0183611fac565b925082612b1157612b10612abf565b5b828204905092915050565b5f81519050612b2a816124d4565b92915050565b5f60208284031215612b4557612b44612019565b5b5f612b5284828501612b1c565b91505092915050565b5f612b658261223b565b612b6f8185612556565b9350612b7f818560208601612255565b612b8881612029565b840191505092915050565b5f6040820190508181035f830152612bab8185612b5b565b90508181036020830152612bbf8184612b5b565b90509392505050565b7f4e6f7420616e20617574686f72697a6564206f7261636c6500000000000000005f82015250565b5f612bfc601883612556565b9150612c0782612bc8565b602082019050919050565b5f6020820190508181035f830152612c2981612bf0565b9050919050565b7f4f7261636c65206d69736d6174636820617420696e64657800000000000000005f82015250565b5f612c64601883612556565b9150612c6f82612c30565b602082019050919050565b5f6020820190508181035f830152612c9181612c58565b9050919050565b7f496e76616c6964206f7261636c6520696e6465780000000000000000000000005f82015250565b5f612ccc601483612556565b9150612cd782612c98565b602082019050919050565b5f6020820190508181035f830152612cf981612cc0565b9050919050565b7f43616e6e6f74207265706f727420796f757273656c66000000000000000000005f82015250565b5f612d34601683612556565b9150612d3f82612d00565b602082019050919050565b5f6020820190508181035f830152612d6181612d28565b9050919050565b7f4f7261636c6520697320616c726561647920626c61636b6c69737465640000005f82015250565b5f612d9c601d83612556565b9150612da782612d68565b602082019050919050565b5f6020820190508181035f830152612dc981612d90565b9050919050565b7f4f7261636c6520616c7265616479207265706f7274656420627920796f7500005f82015250565b5f612e04601e83612556565b9150612e0f82612dd0565b602082019050919050565b5f6020820190508181035f830152612e3181612df8565b9050919050565b7f496e73756666696369656e74207265706f7274206665650000000000000000005f82015250565b5f612e6c601783612556565b9150612e7782612e38565b602082019050919050565b5f6020820190508181035f830152612e9981612e60565b9050919050565b5f612eaa82611fac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612edc57612edb612a1e565b5b600182019050919050565b5f612ef182611fac565b9150612efc83611fac565b9250828201905080821115612f1457612f13612a1e565b5b9291505056fea2646970667358221220db74c88aa3fbc9439de63b98a4ded173383c932dc2063f077c832adabe335ba264736f6c634300081c0033",
}

// RegisterABI is the input ABI used to generate the binding from.
// Deprecated: Use RegisterMetaData.ABI instead.
var RegisterABI = RegisterMetaData.ABI

// RegisterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegisterMetaData.Bin instead.
var RegisterBin = RegisterMetaData.Bin

// DeployRegister deploys a new Ethereum contract, binding an instance of Register to it.
func DeployRegister(auth *bind.TransactOpts, backend bind.ContractBackend, _registerFee *big.Int, _reportFee *big.Int, _feeSetter common.Address, daoOwner common.Address) (common.Address, *types.Transaction, *Register, error) {
	parsed, err := RegisterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegisterBin), backend, _registerFee, _reportFee, _feeSetter, daoOwner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Register{RegisterCaller: RegisterCaller{contract: contract}, RegisterTransactor: RegisterTransactor{contract: contract}, RegisterFilterer: RegisterFilterer{contract: contract}}, nil
}

// Register is an auto generated Go binding around an Ethereum contract.
type Register struct {
	RegisterCaller     // Read-only binding to the contract
	RegisterTransactor // Write-only binding to the contract
	RegisterFilterer   // Log filterer for contract events
}

// RegisterCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegisterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegisterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegisterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegisterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegisterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegisterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegisterSession struct {
	Contract     *Register         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegisterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegisterCallerSession struct {
	Contract *RegisterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegisterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegisterTransactorSession struct {
	Contract     *RegisterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegisterRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegisterRaw struct {
	Contract *Register // Generic contract binding to access the raw methods on
}

// RegisterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegisterCallerRaw struct {
	Contract *RegisterCaller // Generic read-only contract binding to access the raw methods on
}

// RegisterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegisterTransactorRaw struct {
	Contract *RegisterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegister creates a new instance of Register, bound to a specific deployed contract.
func NewRegister(address common.Address, backend bind.ContractBackend) (*Register, error) {
	contract, err := bindRegister(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Register{RegisterCaller: RegisterCaller{contract: contract}, RegisterTransactor: RegisterTransactor{contract: contract}, RegisterFilterer: RegisterFilterer{contract: contract}}, nil
}

// NewRegisterCaller creates a new read-only instance of Register, bound to a specific deployed contract.
func NewRegisterCaller(address common.Address, caller bind.ContractCaller) (*RegisterCaller, error) {
	contract, err := bindRegister(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegisterCaller{contract: contract}, nil
}

// NewRegisterTransactor creates a new write-only instance of Register, bound to a specific deployed contract.
func NewRegisterTransactor(address common.Address, transactor bind.ContractTransactor) (*RegisterTransactor, error) {
	contract, err := bindRegister(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegisterTransactor{contract: contract}, nil
}

// NewRegisterFilterer creates a new log filterer instance of Register, bound to a specific deployed contract.
func NewRegisterFilterer(address common.Address, filterer bind.ContractFilterer) (*RegisterFilterer, error) {
	contract, err := bindRegister(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegisterFilterer{contract: contract}, nil
}

// bindRegister binds a generic wrapper to an already deployed contract.
func bindRegister(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RegisterMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Register *RegisterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Register.Contract.RegisterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Register *RegisterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Register.Contract.RegisterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Register *RegisterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Register.Contract.RegisterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Register *RegisterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Register.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Register *RegisterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Register.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Register *RegisterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Register.Contract.contract.Transact(opts, method, params...)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns((address,string,string,uint256,bool)[])
func (_Register *RegisterCaller) GetOracles(opts *bind.CallOpts) ([]Oracle, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "getOracles")

	if err != nil {
		return *new([]Oracle), err
	}

	out0 := *abi.ConvertType(out[0], new([]Oracle)).(*[]Oracle)

	return out0, err

}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns((address,string,string,uint256,bool)[])
func (_Register *RegisterSession) GetOracles() ([]Oracle, error) {
	return _Register.Contract.GetOracles(&_Register.CallOpts)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns((address,string,string,uint256,bool)[])
func (_Register *RegisterCallerSession) GetOracles() ([]Oracle, error) {
	return _Register.Contract.GetOracles(&_Register.CallOpts)
}

// GetRegistrationFee is a free data retrieval call binding the contract method 0x0946e807.
//
// Solidity: function getRegistrationFee() view returns(uint256)
func (_Register *RegisterCaller) GetRegistrationFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "getRegistrationFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRegistrationFee is a free data retrieval call binding the contract method 0x0946e807.
//
// Solidity: function getRegistrationFee() view returns(uint256)
func (_Register *RegisterSession) GetRegistrationFee() (*big.Int, error) {
	return _Register.Contract.GetRegistrationFee(&_Register.CallOpts)
}

// GetRegistrationFee is a free data retrieval call binding the contract method 0x0946e807.
//
// Solidity: function getRegistrationFee() view returns(uint256)
func (_Register *RegisterCallerSession) GetRegistrationFee() (*big.Int, error) {
	return _Register.Contract.GetRegistrationFee(&_Register.CallOpts)
}

// GetReportFee is a free data retrieval call binding the contract method 0x9a6bea18.
//
// Solidity: function getReportFee() view returns(uint256)
func (_Register *RegisterCaller) GetReportFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "getReportFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReportFee is a free data retrieval call binding the contract method 0x9a6bea18.
//
// Solidity: function getReportFee() view returns(uint256)
func (_Register *RegisterSession) GetReportFee() (*big.Int, error) {
	return _Register.Contract.GetReportFee(&_Register.CallOpts)
}

// GetReportFee is a free data retrieval call binding the contract method 0x9a6bea18.
//
// Solidity: function getReportFee() view returns(uint256)
func (_Register *RegisterCallerSession) GetReportFee() (*big.Int, error) {
	return _Register.Contract.GetReportFee(&_Register.CallOpts)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address oracleAddress) view returns(bool)
func (_Register *RegisterCaller) IsBlacklisted(opts *bind.CallOpts, oracleAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "isBlacklisted", oracleAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address oracleAddress) view returns(bool)
func (_Register *RegisterSession) IsBlacklisted(oracleAddress common.Address) (bool, error) {
	return _Register.Contract.IsBlacklisted(&_Register.CallOpts, oracleAddress)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address oracleAddress) view returns(bool)
func (_Register *RegisterCallerSession) IsBlacklisted(oracleAddress common.Address) (bool, error) {
	return _Register.Contract.IsBlacklisted(&_Register.CallOpts, oracleAddress)
}

// IsOracleRegistered is a free data retrieval call binding the contract method 0x0d1db1f0.
//
// Solidity: function isOracleRegistered() view returns(bool)
func (_Register *RegisterCaller) IsOracleRegistered(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "isOracleRegistered")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOracleRegistered is a free data retrieval call binding the contract method 0x0d1db1f0.
//
// Solidity: function isOracleRegistered() view returns(bool)
func (_Register *RegisterSession) IsOracleRegistered() (bool, error) {
	return _Register.Contract.IsOracleRegistered(&_Register.CallOpts)
}

// IsOracleRegistered is a free data retrieval call binding the contract method 0x0d1db1f0.
//
// Solidity: function isOracleRegistered() view returns(bool)
func (_Register *RegisterCallerSession) IsOracleRegistered() (bool, error) {
	return _Register.Contract.IsOracleRegistered(&_Register.CallOpts)
}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() view returns((address,string,string,uint256,bool))
func (_Register *RegisterCaller) Self(opts *bind.CallOpts) (Oracle, error) {
	var out []interface{}
	err := _Register.contract.Call(opts, &out, "self")

	if err != nil {
		return *new(Oracle), err
	}

	out0 := *abi.ConvertType(out[0], new(Oracle)).(*Oracle)

	return out0, err

}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() view returns((address,string,string,uint256,bool))
func (_Register *RegisterSession) Self() (Oracle, error) {
	return _Register.Contract.Self(&_Register.CallOpts)
}

// Self is a free data retrieval call binding the contract method 0x7104ddb2.
//
// Solidity: function self() view returns((address,string,string,uint256,bool))
func (_Register *RegisterCallerSession) Self() (Oracle, error) {
	return _Register.Contract.Self(&_Register.CallOpts)
}

// LogOut is a paid mutator transaction binding the contract method 0xa208a898.
//
// Solidity: function LogOut() returns(bool)
func (_Register *RegisterTransactor) LogOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "LogOut")
}

// LogOut is a paid mutator transaction binding the contract method 0xa208a898.
//
// Solidity: function LogOut() returns(bool)
func (_Register *RegisterSession) LogOut() (*types.Transaction, error) {
	return _Register.Contract.LogOut(&_Register.TransactOpts)
}

// LogOut is a paid mutator transaction binding the contract method 0xa208a898.
//
// Solidity: function LogOut() returns(bool)
func (_Register *RegisterTransactorSession) LogOut() (*types.Transaction, error) {
	return _Register.Contract.LogOut(&_Register.TransactOpts)
}

// Login is a paid mutator transaction binding the contract method 0xf00ac1da.
//
// Solidity: function Login() returns(bool)
func (_Register *RegisterTransactor) Login(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "Login")
}

// Login is a paid mutator transaction binding the contract method 0xf00ac1da.
//
// Solidity: function Login() returns(bool)
func (_Register *RegisterSession) Login() (*types.Transaction, error) {
	return _Register.Contract.Login(&_Register.TransactOpts)
}

// Login is a paid mutator transaction binding the contract method 0xf00ac1da.
//
// Solidity: function Login() returns(bool)
func (_Register *RegisterTransactorSession) Login() (*types.Transaction, error) {
	return _Register.Contract.Login(&_Register.TransactOpts)
}

// ChangeRegisterTax is a paid mutator transaction binding the contract method 0x7571bdd0.
//
// Solidity: function changeRegisterTax(uint256 tax) returns(bool)
func (_Register *RegisterTransactor) ChangeRegisterTax(opts *bind.TransactOpts, tax *big.Int) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "changeRegisterTax", tax)
}

// ChangeRegisterTax is a paid mutator transaction binding the contract method 0x7571bdd0.
//
// Solidity: function changeRegisterTax(uint256 tax) returns(bool)
func (_Register *RegisterSession) ChangeRegisterTax(tax *big.Int) (*types.Transaction, error) {
	return _Register.Contract.ChangeRegisterTax(&_Register.TransactOpts, tax)
}

// ChangeRegisterTax is a paid mutator transaction binding the contract method 0x7571bdd0.
//
// Solidity: function changeRegisterTax(uint256 tax) returns(bool)
func (_Register *RegisterTransactorSession) ChangeRegisterTax(tax *big.Int) (*types.Transaction, error) {
	return _Register.Contract.ChangeRegisterTax(&_Register.TransactOpts, tax)
}

// Register is a paid mutator transaction binding the contract method 0x3ffbd47f.
//
// Solidity: function register(string ip, string port) payable returns(bool)
func (_Register *RegisterTransactor) Register(opts *bind.TransactOpts, ip string, port string) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "register", ip, port)
}

// Register is a paid mutator transaction binding the contract method 0x3ffbd47f.
//
// Solidity: function register(string ip, string port) payable returns(bool)
func (_Register *RegisterSession) Register(ip string, port string) (*types.Transaction, error) {
	return _Register.Contract.Register(&_Register.TransactOpts, ip, port)
}

// Register is a paid mutator transaction binding the contract method 0x3ffbd47f.
//
// Solidity: function register(string ip, string port) payable returns(bool)
func (_Register *RegisterTransactorSession) Register(ip string, port string) (*types.Transaction, error) {
	return _Register.Contract.Register(&_Register.TransactOpts, ip, port)
}

// ReportOracle is a paid mutator transaction binding the contract method 0xe1704d83.
//
// Solidity: function reportOracle(address oracleAddress) payable returns(bool)
func (_Register *RegisterTransactor) ReportOracle(opts *bind.TransactOpts, oracleAddress common.Address) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "reportOracle", oracleAddress)
}

// ReportOracle is a paid mutator transaction binding the contract method 0xe1704d83.
//
// Solidity: function reportOracle(address oracleAddress) payable returns(bool)
func (_Register *RegisterSession) ReportOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _Register.Contract.ReportOracle(&_Register.TransactOpts, oracleAddress)
}

// ReportOracle is a paid mutator transaction binding the contract method 0xe1704d83.
//
// Solidity: function reportOracle(address oracleAddress) payable returns(bool)
func (_Register *RegisterTransactorSession) ReportOracle(oracleAddress common.Address) (*types.Transaction, error) {
	return _Register.Contract.ReportOracle(&_Register.TransactOpts, oracleAddress)
}

// RevokeOwnership is a paid mutator transaction binding the contract method 0x2b968958.
//
// Solidity: function revokeOwnership() returns(bool)
func (_Register *RegisterTransactor) RevokeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "revokeOwnership")
}

// RevokeOwnership is a paid mutator transaction binding the contract method 0x2b968958.
//
// Solidity: function revokeOwnership() returns(bool)
func (_Register *RegisterSession) RevokeOwnership() (*types.Transaction, error) {
	return _Register.Contract.RevokeOwnership(&_Register.TransactOpts)
}

// RevokeOwnership is a paid mutator transaction binding the contract method 0x2b968958.
//
// Solidity: function revokeOwnership() returns(bool)
func (_Register *RegisterTransactorSession) RevokeOwnership() (*types.Transaction, error) {
	return _Register.Contract.RevokeOwnership(&_Register.TransactOpts)
}

// UpdateRegistrationFee is a paid mutator transaction binding the contract method 0xaf582c6b.
//
// Solidity: function updateRegistrationFee(uint256 fee) returns(bool)
func (_Register *RegisterTransactor) UpdateRegistrationFee(opts *bind.TransactOpts, fee *big.Int) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "updateRegistrationFee", fee)
}

// UpdateRegistrationFee is a paid mutator transaction binding the contract method 0xaf582c6b.
//
// Solidity: function updateRegistrationFee(uint256 fee) returns(bool)
func (_Register *RegisterSession) UpdateRegistrationFee(fee *big.Int) (*types.Transaction, error) {
	return _Register.Contract.UpdateRegistrationFee(&_Register.TransactOpts, fee)
}

// UpdateRegistrationFee is a paid mutator transaction binding the contract method 0xaf582c6b.
//
// Solidity: function updateRegistrationFee(uint256 fee) returns(bool)
func (_Register *RegisterTransactorSession) UpdateRegistrationFee(fee *big.Int) (*types.Transaction, error) {
	return _Register.Contract.UpdateRegistrationFee(&_Register.TransactOpts, fee)
}

// UpdateReportFee is a paid mutator transaction binding the contract method 0x69366c48.
//
// Solidity: function updateReportFee(uint256 fee) returns(bool)
func (_Register *RegisterTransactor) UpdateReportFee(opts *bind.TransactOpts, fee *big.Int) (*types.Transaction, error) {
	return _Register.contract.Transact(opts, "updateReportFee", fee)
}

// UpdateReportFee is a paid mutator transaction binding the contract method 0x69366c48.
//
// Solidity: function updateReportFee(uint256 fee) returns(bool)
func (_Register *RegisterSession) UpdateReportFee(fee *big.Int) (*types.Transaction, error) {
	return _Register.Contract.UpdateReportFee(&_Register.TransactOpts, fee)
}

// UpdateReportFee is a paid mutator transaction binding the contract method 0x69366c48.
//
// Solidity: function updateReportFee(uint256 fee) returns(bool)
func (_Register *RegisterTransactorSession) UpdateReportFee(fee *big.Int) (*types.Transaction, error) {
	return _Register.Contract.UpdateReportFee(&_Register.TransactOpts, fee)
}

// RegisterOracleBlacklistedIterator is returned from FilterOracleBlacklisted and is used to iterate over the raw logs and unpacked data for OracleBlacklisted events raised by the Register contract.
type RegisterOracleBlacklistedIterator struct {
	Event *RegisterOracleBlacklisted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleBlacklistedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleBlacklisted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleBlacklisted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleBlacklistedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleBlacklistedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleBlacklisted represents a OracleBlacklisted event raised by the Register contract.
type RegisterOracleBlacklisted struct {
	BlacklistedOracle common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOracleBlacklisted is a free log retrieval operation binding the contract event 0x8f4f70e0f343350f6df22d754271f375cf94e4a4d04ccb29df713c6ffce14dbf.
//
// Solidity: event OracleBlacklisted(address indexed blacklistedOracle)
func (_Register *RegisterFilterer) FilterOracleBlacklisted(opts *bind.FilterOpts, blacklistedOracle []common.Address) (*RegisterOracleBlacklistedIterator, error) {

	var blacklistedOracleRule []interface{}
	for _, blacklistedOracleItem := range blacklistedOracle {
		blacklistedOracleRule = append(blacklistedOracleRule, blacklistedOracleItem)
	}

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleBlacklisted", blacklistedOracleRule)
	if err != nil {
		return nil, err
	}
	return &RegisterOracleBlacklistedIterator{contract: _Register.contract, event: "OracleBlacklisted", logs: logs, sub: sub}, nil
}

// WatchOracleBlacklisted is a free log subscription operation binding the contract event 0x8f4f70e0f343350f6df22d754271f375cf94e4a4d04ccb29df713c6ffce14dbf.
//
// Solidity: event OracleBlacklisted(address indexed blacklistedOracle)
func (_Register *RegisterFilterer) WatchOracleBlacklisted(opts *bind.WatchOpts, sink chan<- *RegisterOracleBlacklisted, blacklistedOracle []common.Address) (event.Subscription, error) {

	var blacklistedOracleRule []interface{}
	for _, blacklistedOracleItem := range blacklistedOracle {
		blacklistedOracleRule = append(blacklistedOracleRule, blacklistedOracleItem)
	}

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleBlacklisted", blacklistedOracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleBlacklisted)
				if err := _Register.contract.UnpackLog(event, "OracleBlacklisted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleBlacklisted is a log parse operation binding the contract event 0x8f4f70e0f343350f6df22d754271f375cf94e4a4d04ccb29df713c6ffce14dbf.
//
// Solidity: event OracleBlacklisted(address indexed blacklistedOracle)
func (_Register *RegisterFilterer) ParseOracleBlacklisted(log types.Log) (*RegisterOracleBlacklisted, error) {
	event := new(RegisterOracleBlacklisted)
	if err := _Register.contract.UnpackLog(event, "OracleBlacklisted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegisterOracleOfflineIterator is returned from FilterOracleOffline and is used to iterate over the raw logs and unpacked data for OracleOffline events raised by the Register contract.
type RegisterOracleOfflineIterator struct {
	Event *RegisterOracleOffline // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleOfflineIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleOffline)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleOffline)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleOfflineIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleOfflineIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleOffline represents a OracleOffline event raised by the Register contract.
type RegisterOracleOffline struct {
	OracleAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOracleOffline is a free log retrieval operation binding the contract event 0x6eccb14325d715b33601268fe5c7d8a1618261e4d242e890c9e2e372adaf1fbc.
//
// Solidity: event OracleOffline(address indexed oracleAddress)
func (_Register *RegisterFilterer) FilterOracleOffline(opts *bind.FilterOpts, oracleAddress []common.Address) (*RegisterOracleOfflineIterator, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleOffline", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return &RegisterOracleOfflineIterator{contract: _Register.contract, event: "OracleOffline", logs: logs, sub: sub}, nil
}

// WatchOracleOffline is a free log subscription operation binding the contract event 0x6eccb14325d715b33601268fe5c7d8a1618261e4d242e890c9e2e372adaf1fbc.
//
// Solidity: event OracleOffline(address indexed oracleAddress)
func (_Register *RegisterFilterer) WatchOracleOffline(opts *bind.WatchOpts, sink chan<- *RegisterOracleOffline, oracleAddress []common.Address) (event.Subscription, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleOffline", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleOffline)
				if err := _Register.contract.UnpackLog(event, "OracleOffline", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleOffline is a log parse operation binding the contract event 0x6eccb14325d715b33601268fe5c7d8a1618261e4d242e890c9e2e372adaf1fbc.
//
// Solidity: event OracleOffline(address indexed oracleAddress)
func (_Register *RegisterFilterer) ParseOracleOffline(log types.Log) (*RegisterOracleOffline, error) {
	event := new(RegisterOracleOffline)
	if err := _Register.contract.UnpackLog(event, "OracleOffline", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegisterOracleOnlineIterator is returned from FilterOracleOnline and is used to iterate over the raw logs and unpacked data for OracleOnline events raised by the Register contract.
type RegisterOracleOnlineIterator struct {
	Event *RegisterOracleOnline // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleOnlineIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleOnline)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleOnline)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleOnlineIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleOnlineIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleOnline represents a OracleOnline event raised by the Register contract.
type RegisterOracleOnline struct {
	OracleAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOracleOnline is a free log retrieval operation binding the contract event 0x3a21ecfcdc410d1e3552f24e84bbf13af57e47436f3b9ac5045ae9f3adcdc411.
//
// Solidity: event OracleOnline(address indexed oracleAddress)
func (_Register *RegisterFilterer) FilterOracleOnline(opts *bind.FilterOpts, oracleAddress []common.Address) (*RegisterOracleOnlineIterator, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleOnline", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return &RegisterOracleOnlineIterator{contract: _Register.contract, event: "OracleOnline", logs: logs, sub: sub}, nil
}

// WatchOracleOnline is a free log subscription operation binding the contract event 0x3a21ecfcdc410d1e3552f24e84bbf13af57e47436f3b9ac5045ae9f3adcdc411.
//
// Solidity: event OracleOnline(address indexed oracleAddress)
func (_Register *RegisterFilterer) WatchOracleOnline(opts *bind.WatchOpts, sink chan<- *RegisterOracleOnline, oracleAddress []common.Address) (event.Subscription, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleOnline", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleOnline)
				if err := _Register.contract.UnpackLog(event, "OracleOnline", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleOnline is a log parse operation binding the contract event 0x3a21ecfcdc410d1e3552f24e84bbf13af57e47436f3b9ac5045ae9f3adcdc411.
//
// Solidity: event OracleOnline(address indexed oracleAddress)
func (_Register *RegisterFilterer) ParseOracleOnline(log types.Log) (*RegisterOracleOnline, error) {
	event := new(RegisterOracleOnline)
	if err := _Register.contract.UnpackLog(event, "OracleOnline", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegisterOracleRegisterTaxUpdatedIterator is returned from FilterOracleRegisterTaxUpdated and is used to iterate over the raw logs and unpacked data for OracleRegisterTaxUpdated events raised by the Register contract.
type RegisterOracleRegisterTaxUpdatedIterator struct {
	Event *RegisterOracleRegisterTaxUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleRegisterTaxUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleRegisterTaxUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleRegisterTaxUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleRegisterTaxUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleRegisterTaxUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleRegisterTaxUpdated represents a OracleRegisterTaxUpdated event raised by the Register contract.
type RegisterOracleRegisterTaxUpdated struct {
	NewTax *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOracleRegisterTaxUpdated is a free log retrieval operation binding the contract event 0xa288a9ac9f74fe4c85e8263739645d49297e82ffa010aac11899ba671a54d1ac.
//
// Solidity: event OracleRegisterTaxUpdated(uint256 newTax)
func (_Register *RegisterFilterer) FilterOracleRegisterTaxUpdated(opts *bind.FilterOpts) (*RegisterOracleRegisterTaxUpdatedIterator, error) {

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleRegisterTaxUpdated")
	if err != nil {
		return nil, err
	}
	return &RegisterOracleRegisterTaxUpdatedIterator{contract: _Register.contract, event: "OracleRegisterTaxUpdated", logs: logs, sub: sub}, nil
}

// WatchOracleRegisterTaxUpdated is a free log subscription operation binding the contract event 0xa288a9ac9f74fe4c85e8263739645d49297e82ffa010aac11899ba671a54d1ac.
//
// Solidity: event OracleRegisterTaxUpdated(uint256 newTax)
func (_Register *RegisterFilterer) WatchOracleRegisterTaxUpdated(opts *bind.WatchOpts, sink chan<- *RegisterOracleRegisterTaxUpdated) (event.Subscription, error) {

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleRegisterTaxUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleRegisterTaxUpdated)
				if err := _Register.contract.UnpackLog(event, "OracleRegisterTaxUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRegisterTaxUpdated is a log parse operation binding the contract event 0xa288a9ac9f74fe4c85e8263739645d49297e82ffa010aac11899ba671a54d1ac.
//
// Solidity: event OracleRegisterTaxUpdated(uint256 newTax)
func (_Register *RegisterFilterer) ParseOracleRegisterTaxUpdated(log types.Log) (*RegisterOracleRegisterTaxUpdated, error) {
	event := new(RegisterOracleRegisterTaxUpdated)
	if err := _Register.contract.UnpackLog(event, "OracleRegisterTaxUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegisterOracleRegisteredIterator is returned from FilterOracleRegistered and is used to iterate over the raw logs and unpacked data for OracleRegistered events raised by the Register contract.
type RegisterOracleRegisteredIterator struct {
	Event *RegisterOracleRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleRegistered represents a OracleRegistered event raised by the Register contract.
type RegisterOracleRegistered struct {
	OracleAddress common.Address
	Ip            string
	Port          string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOracleRegistered is a free log retrieval operation binding the contract event 0x8c1c8966369199dc710cd8b615bf16a86520dd165679cb74aa5f427d2bf8c0c9.
//
// Solidity: event OracleRegistered(address indexed oracleAddress, string ip, string port)
func (_Register *RegisterFilterer) FilterOracleRegistered(opts *bind.FilterOpts, oracleAddress []common.Address) (*RegisterOracleRegisteredIterator, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleRegistered", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return &RegisterOracleRegisteredIterator{contract: _Register.contract, event: "OracleRegistered", logs: logs, sub: sub}, nil
}

// WatchOracleRegistered is a free log subscription operation binding the contract event 0x8c1c8966369199dc710cd8b615bf16a86520dd165679cb74aa5f427d2bf8c0c9.
//
// Solidity: event OracleRegistered(address indexed oracleAddress, string ip, string port)
func (_Register *RegisterFilterer) WatchOracleRegistered(opts *bind.WatchOpts, sink chan<- *RegisterOracleRegistered, oracleAddress []common.Address) (event.Subscription, error) {

	var oracleAddressRule []interface{}
	for _, oracleAddressItem := range oracleAddress {
		oracleAddressRule = append(oracleAddressRule, oracleAddressItem)
	}

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleRegistered", oracleAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleRegistered)
				if err := _Register.contract.UnpackLog(event, "OracleRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleRegistered is a log parse operation binding the contract event 0x8c1c8966369199dc710cd8b615bf16a86520dd165679cb74aa5f427d2bf8c0c9.
//
// Solidity: event OracleRegistered(address indexed oracleAddress, string ip, string port)
func (_Register *RegisterFilterer) ParseOracleRegistered(log types.Log) (*RegisterOracleRegistered, error) {
	event := new(RegisterOracleRegistered)
	if err := _Register.contract.UnpackLog(event, "OracleRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegisterOracleReportedIterator is returned from FilterOracleReported and is used to iterate over the raw logs and unpacked data for OracleReported events raised by the Register contract.
type RegisterOracleReportedIterator struct {
	Event *RegisterOracleReported // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegisterOracleReportedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegisterOracleReported)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegisterOracleReported)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegisterOracleReportedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegisterOracleReportedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegisterOracleReported represents a OracleReported event raised by the Register contract.
type RegisterOracleReported struct {
	Reporter       common.Address
	ReportedOracle common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOracleReported is a free log retrieval operation binding the contract event 0xc288b29f22724d188803361dc865debd5a98e3f2c073a19c9fe8639a6274d23d.
//
// Solidity: event OracleReported(address indexed reporter, address indexed reportedOracle)
func (_Register *RegisterFilterer) FilterOracleReported(opts *bind.FilterOpts, reporter []common.Address, reportedOracle []common.Address) (*RegisterOracleReportedIterator, error) {

	var reporterRule []interface{}
	for _, reporterItem := range reporter {
		reporterRule = append(reporterRule, reporterItem)
	}
	var reportedOracleRule []interface{}
	for _, reportedOracleItem := range reportedOracle {
		reportedOracleRule = append(reportedOracleRule, reportedOracleItem)
	}

	logs, sub, err := _Register.contract.FilterLogs(opts, "OracleReported", reporterRule, reportedOracleRule)
	if err != nil {
		return nil, err
	}
	return &RegisterOracleReportedIterator{contract: _Register.contract, event: "OracleReported", logs: logs, sub: sub}, nil
}

// WatchOracleReported is a free log subscription operation binding the contract event 0xc288b29f22724d188803361dc865debd5a98e3f2c073a19c9fe8639a6274d23d.
//
// Solidity: event OracleReported(address indexed reporter, address indexed reportedOracle)
func (_Register *RegisterFilterer) WatchOracleReported(opts *bind.WatchOpts, sink chan<- *RegisterOracleReported, reporter []common.Address, reportedOracle []common.Address) (event.Subscription, error) {

	var reporterRule []interface{}
	for _, reporterItem := range reporter {
		reporterRule = append(reporterRule, reporterItem)
	}
	var reportedOracleRule []interface{}
	for _, reportedOracleItem := range reportedOracle {
		reportedOracleRule = append(reportedOracleRule, reportedOracleItem)
	}

	logs, sub, err := _Register.contract.WatchLogs(opts, "OracleReported", reporterRule, reportedOracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegisterOracleReported)
				if err := _Register.contract.UnpackLog(event, "OracleReported", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleReported is a log parse operation binding the contract event 0xc288b29f22724d188803361dc865debd5a98e3f2c073a19c9fe8639a6274d23d.
//
// Solidity: event OracleReported(address indexed reporter, address indexed reportedOracle)
func (_Register *RegisterFilterer) ParseOracleReported(log types.Log) (*RegisterOracleReported, error) {
	event := new(RegisterOracleReported)
	if err := _Register.contract.UnpackLog(event, "OracleReported", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
